# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet mainn
	int main(void)
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet #ifn
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet #def
	#define
snippet #ifd
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(tr(Filename('_$1_H', '_UNTITLED_H'), '-', '_'))`}
	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Struct
snippet st
	struct ${1:`tr(Filename('$1_t', 'name'), '-', '_')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# This is kind of convenient
snippet .
	[${1}]${2}
