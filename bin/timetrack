#!/usr/bin/env bash
# track times for tasks
source functions.sh

show_help() {
    cat >&2 << EOM
USAGE:   $(basename $0) [cmd]

COMMANDS:
    add "descr" Add task with given description and closes open tasks.
    clear       Remove all tasks from.
    list        List tasks with their current duration.
    stop        Close all open tasks.
EOM
}

cachedir=${XDG_CACHE_HOME:-"$HOME/.cache"}
if [ ! -d "$cachedir" ]; then
    die "Directory $cachedir does not exists"
fi

filepath=$cachedir/timetrack.txt

clear_file() {
    echo '' > "$filepath"
}

now() {
    date --rfc-3339=seconds
}

add_task() {
    local phrase="$1"
    printf "%s\t%s\n" "$phrase" "$(now)" >> "$filepath"
}

get_line_with_duration() {
    local start_date local secs local duration local new=""
    local tab=$(printf '\t')
    # first check for open tasks - tab followed by date time, which
    # contains :.
    if [[ "$line" =~ "${tab}"*':' ]]; then
        ## calculate the duration
        start_date=${line#*$tab}
        # strip times from line
        line=${line%*$tab*}
        secs=$(get_duration "$start_date")
        echo "${line}${tab}${secs}"
    else
        echo "$line"
    fi
}

stop_open_task() {
    local start_date local secs local duration local new=""
    local tab=$(printf '\t')
    while read -r line || [[ -n "$line" ]]; do
        new="$new"$'\n'"$(get_line_with_duration $line)"
    done < "$filepath"

    # write new calculated lines into the file - skip empty lines
    echo "$new" | sed '/^$/d' > "$filepath"
}

get_duration() {
    local from="$1"
    echo "$(($(date +%s) - $(date +%s -d "$from")))"
}

format_duration() {
    local secs="$1"
    printf '%02dh:%02dm' $(($secs%86400/3600)) $(($secs%3600/60))
}

list_tasks() {
    local new open_marker='#' tab=$(printf '\t')
    # prepare all file lines - get the duration also for running tasks
    # prepend open_marker before open tasks
    while read -r line || [[ -n "$line" ]]; do
        new=$(get_line_with_duration $line)
        if [[ "$line" =~ "$tab"*':' ]]; then
            echo "${open_marker}$new"
        else
            echo "$new"
        fi
    done < "$filepath" | \
    # summarize the durations to the tasks based on their name/text
    awk '/\t[0-9]+$/ {a[$1]+=$2}
    END {
        for (t in a) {
            printf "%s\t%d\n", t, a[t]
        }
    }' | \
    # pretty print the tasks
    while read -r line || [[ -n "$line" ]]; do
        # calculate the duration
        secs=${line#*$tab}
        # strip date or time in seconds from line
        text=${line%*$tab*}
        duration=$(format_duration "$secs")
        if [[ "$text" =~ ^$open_marker ]]; then
            # strip leading # that was added as marker for open task
            text=${text#$open_marker}
            echo -e "${duration}${tab}${CY}${text}${CDEF}"
        else
            echo -e "${duration}${tab}${CG}${text}${CDEF}"
        fi
    done
}

# check first option which might be a command
case "$1" in
    add)
        shift
        stop_open_task
        add_task "$*"
        ;;
    list)   list_tasks ;;
    stop)   stop_open_task ;;
    clear)  clear_file ;;
    *)  die $(show_help) ;;
esac
