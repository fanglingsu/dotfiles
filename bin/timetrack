#!/usr/bin/env bash
# track times for tasks
# data are stored in XDG_CACHE_HOME/timetrack.txt
# as 'datetime or seconds<tab>message'
source functions.sh

show_help() {
    cat >&2 << EOM
USAGE:   $(basename $0) [cmd]

COMMANDS:
    a|add "descr"     Add task with given description and closes open tasks.
    c|clear           Remove all tasks from.
    l|list [hours]    List tasks with their current duration. If hours is given
                      the duration is shown in hours rounded to quarter.
    s|stop            Close all open tasks.
    t|tasks           List task without times and summary.
EOM
}

cachedir=${XDG_CACHE_HOME:-"$HOME/.cache"}
if [ ! -d "$cachedir" ]; then
    die "Directory $cachedir does not exists"
fi

filepath=$cachedir/timetrack.txt
TAB=$'\t'

# create the file if it does not exists
[[ -f "$filepath" ]] || touch "$filepath"

clear_file() {
    echo '' > "$filepath"
}

now() {
    date --rfc-3339=seconds
}

add_task() {
    if [ ! -z "$1" ]; then
        printf "%s\t%s\n" "$(now)" "$1" >> "$filepath"
    fi
}

get_line_with_duration() {
    local start_date secs duration new=""
    # first check for open tasks date time containing : followed by tab
    if [[ "$line" =~ [-:+][0-9]+"$TAB" ]]; then
        # calculate the duration
        start_date=${line%*$TAB*}
        # strip times from line
        line=${line#*$TAB}
        secs=$(get_duration "$start_date")
        echo "${secs}${TAB}${line}"
    else
        echo "$line"
    fi
}

stop_open_task() {
    local new=""
    while read -r line || [[ -n "$line" ]]; do
        new="$new"$'\n'"$(get_line_with_duration $line)"
    done < "$filepath"

    # write new calculated lines into the file - skip empty lines
    echo "$new" | sed '/^$/d' > "$filepath"
}

get_duration() {
    echo "$(($(date +%s) - $(date +%s -d "$1")))"
}

format_duration() {
    if [ $only_hours -eq 1 ]; then
        echo "$1" | awk '{printf "%.2fh", int($1/900+0.5)*0.25}'
    else
        printf '%02d:%02d:%02d' $(($1%86400/3600)) $(($1%3600/60)) $(($1%60))
    fi
}

get_all_lines() {
    # prepare all file lines - get the duration also for running tasks
    # prepend open_marker before open tasks
    while read -r line || [[ -n "$line" ]]; do
        new=$(get_line_with_duration $line)
        if [[ "$line" =~ [-:+][0-9]+"$TAB" ]]; then
            echo "#$new"
        else
            echo "$new"
        fi
    done < "$filepath" | \
        awk -F"$TAB" \
        '/[0-9]+\t/ {
            if ($1~/^#/) {
                $1=substr($1,2)
                # prepend the current task marker
                $2="#" $2
            }
            a[$2]+=$1
        }
        END {
            for (t in a) {
                printf "%s\t%d\n", t, a[t]
            }
        }'
}

list_tasks() {
    local sum=0 open closed
    while read -r line || [[ -n "$line" ]]; do
        # calculate the duration
        secs=${line#*$TAB}
        if [ "$secs" == "" ]; then
            continue
        fi
        # strip date or time in seconds from line
        text=${line%*$TAB*}
        duration=$(format_duration "$secs")
        if [[ "$text" =~ ^# ]]; then
            # strip leading # that was added as marker for open task
            text=${text#'#'}
            open="$open"$'\n'"${duration}${TAB}${CY}${text}${CDEF}"
        else
            closed="$closed"$'\n'"${duration}${TAB}${CG}${text}${CDEF}"
        fi
        sum=$(($sum+$secs))
    done <<< "$(get_all_lines)"
    # sort closed to the end
    sum=$(format_duration "$sum")
    echo -e "$closed$open\n-----\n$sum" | sed '/^$/d'
}

list_raw_tasks() {
    cut -f2 "$filepath" | sort -u
}

# check first option which might be a command
case "$1" in
    a|add)
        shift
        stop_open_task
        add_task "$*" ;;
    c|clear)
        clear_file ;;
    l|list)
        shift
        [[ "$1" == "hours" ]] && only_hours=1 || only_hours=0
        list_tasks ;;
    s|stop)
        stop_open_task ;;
    t|tasks)
        list_raw_tasks ;;
    *)
        die $(show_help) ;;
esac
