#!/usr/bin/env bash
set -o pipefail
# extracts time data from stdin. 0.5d 2h 10m
# File Format:
#   times are considered to be tagged by TAG SPACE TIME
#   TAG should not contain whitespace
#   TIME see $PATTERN
PATTERN='([[:digit:]]*\.)?[[:digit:]]+[dhm]'
DAYHOURS=8
# Tagpattern to filter the raw time string by prepending word.
TAG=""
# output units
# m -> minutes
# h -> hours
# dh -> as days hours
OUTPUT_UNIT=dh

source functions.sh

# show the usage and help message
show_help() {
    cat >&2 << EOM
USAGE:   $(basename $0) [OPTIONS]
OPTIONS:

   -d HOURS Set the hours per day (for example 8 to cover a person day)
            Default is 8,
   -h       Show this help
   -o UNIT  Output unit
            dh - days and hours (default)
            d  - days
            h  - hours
            m  - minutes

   -t       Set a tag/word to select specific prefixed times.
            E.g. use -t 'foo' to match times like '...foo 2.5d'
            Matching is always done from wrod beginning by '\bTAG'
            To use infix matching -t '\w*TAG\w*' could be used
EOM
}

# process options to configure global settings
while getopts "d:ho:t:?" Option; do
    case $Option in
        d )  DAYHOURS=$OPTARG ;;
        h )  die "$(show_help)" 2 ;;
        o )  OUTPUT_UNIT=$OPTARG ;;
        t )  TAG=$OPTARG ;;
        \? ) die "$(show_help)" 2 ;;
    esac
done

extracttime() {
    grep -oE "$PATTERN" \
        | awk -v dayhours="$DAYHOURS" -v unit="$OUTPUT_UNIT" '
    BEGIN{
        min = 0;
        mperday = dayhours * 60;
    }
    /m$/{
        min += $1;
    }
    /h$/{
        min += (60 * $1)
    }
    /d$/{
        min += (mperday * $1)
    }
    END{
        switch (unit) {
        case "m":
            printf "%dm", min
            break
        case "h":
            printf "%.2fh ", min / 60;
            break
        case "d":
            printf "%.2fh ", min / mperday;
            break
        case "dh":
        default:
            v = int(min/mperday);
            if (min/mperday >= 1) {
                printf "%dd ", v;
            }
            printf "%.2fh ", (min % mperday) / 60;
            break
        }
    }'
}

# prepend tag and space pattern to the global time pattern.
prefilter() {
    local pattern="\b$1[[:space:]]*$PATTERN"
    grep -oE "$pattern"
}

if [[ ! -z $TAG ]]; then
    prefilter "$TAG" | extracttime
else
    extracttime
fi
