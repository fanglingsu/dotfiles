#!/usr/bin/env bash
# This scripts created models woth setters and getter for attributes
# read from stdin and resource and collection models.

# use the directory from where the script is called
CONFIG_FILE=".config.sh"
BASE_DIR="$(readlink -fn -- `pwd`)"

source functions.sh

# check if the config could be found and include it
if [ -f "$BASE_DIR/$CONFIG_FILE" ]; then
    source "$BASE_DIR/$CONFIG_FILE"
fi

# show the usage and help message
show_help() {
    cat >&2 << EOM
USAGE:   $(basename $0) [OPTIONS]

OPTIONS: will overwrite settings done in $CONFIG_FILE
            located in the directory where this script is run from.

    -b    Base-Path of the project (Magento Root)
    -c    Code-Pool to create the files in (core, community, local)
    -d    Dry-Run don't create files
    -h    Show this help
    -i    Id field name like 'id'
    -m    Module name
    -M    Model Name like 'Customer'
    -n    Name-Space for the model classes
    -t    Table identifier like 'module/customer' can be autocalculated
          out of module and model
    -u    User name for the doc block
    -x    Show current configuration

Reads data for setters and getters from stdin in format [{name#type}, {...}]
    echo 'name#string age#integer' | $(basename $0)
EOM
}

# show set configuration options
print_config() {
    message_head "Config"
    cat >&2 << EOM
BASE_PATH:        $BASE_PATH
CODE_POOL:        $CODE_POOL
ID_FIELD:         $ID_FIELD
NAME_SPACE:       $NAME_SPACE
MODULE:           $MODULE
MODEL:            $MODEL
NAME:             $NAME
TABLE_IDENTIFIER: $TABLE_IDENTIFIER
DRY_RUN:          $DRY_RUN
EOM
}

# process options to configure global settings
while getopts "b:c:dhi:m:M:n:t:u:x?" Option; do
    case $Option in
        b ) BASE_PATH=$OPTARG ;;
        c ) CODE_POOL=$OPTARG ;;
        d ) DRY_RUN=1 ;;
        h ) die "$(show_help)" 2 ;;
        i ) ID_FIELD=$OPTARG ;;
        m ) MODULE=$OPTARG ;;
        M ) MODEL=$OPTARG
            TABLE_IDENTIFIER=${TABLE_IDENTIFIER:-$(echo "$MODULE/$MODEL" | sed 's/.*/\L&\E/')}
            ;;
        n ) NAME_SPACE=$OPTARG ;;
        t ) TABLE_IDENTIFIER=$OPTARG ;;
        u ) NAME=$OPTARG ;;
        x ) die "$(print_config)" 2 ;;
        \? )die "$(show_help)" 2 ;;
    esac
done

# assigne default configurations
BASE_PATH=${BASE_PATH:-"$BASE_DIR"}
ID_FIELD=${ID_FIELD:-"id"}
NAME=${NAME:-"$USER"}
CODE_POOL=${CODE_POOL:-"local"}
NAME_SPACE=${NAME_SPACE:-"Dotsource"}
MODULE=${MODULE:-""}
MODEL=${MODEL:-""}
DRY_RUN=${DRY_RUN:-0}

source mage-base.sh

# check required options
if [ "$MODULE" = "" ]; then
    show_help
    echo ""
    write_error "No module specified"
    exit 1
fi

# prepare some global used variables
MODEL_PATH="$(get_module_path)/Model"

# build the getter and setter mehtods.
#
# @param string Full class name
# @param string name of the database field
# @param string data type of the field (integer, string, ...)
get_methods()
{
    local class_name="$1"
    local attribute_name="$2"
    local type="$3"
    local var_name=($(camelize "$attribute_name"))
    local set_method_name=($(camelize "set $attribute_name"))
    local get_method_name=($(camelize "get $attribute_name"))
    cat << EOM


    /**
     * Set the value for field $attribute_name.
     *
     * @param   $type \$$var_name
     * @return  $class_name
     */
    public function $set_method_name(\$$var_name)
    {
        return \$this->setData('$attribute_name', \$$var_name);
    }

    /**
     * Retrieves the value of field $attribute_name.
     *
     * @return  $type|null
     */
    public function $get_method_name()
    {
        return \$this->_getData('$attribute_name');
    }
EOM
}

# generates the model class content
#
# @param string {field_name#type tupel}
create_model_class() {
    local data=($(echo "$1"))
    local class_name="${NAME_SPACE}_${MODULE}_Model_${MODEL}"

    local file_path="$MODEL_PATH/$(echo "$MODEL" | tr _ /).php"
    local dir_path=`dirname "$file_path"`
    local model_identifier=($(echo "${MODULE}/${MODEL}" | sed -e 's/.*/\L&\E/'))

    # generate the class dock block
    local str=$(cat << EOM
`get_php_docblock "$class_name"`
class $class_name extends
    Mage_Core_Model_Abstract
{

    /**
     * Standard model pseudo constructor.
     *
     * @return  null
     */
    protected function _construct()
    {
        parent::_construct();
        \$this->_init('$model_identifier');
    }
EOM
)

    # generate all getters and setters
    count="${#data[@]}"

    IFS='#'
    for ((i = 0; i < count; i++))
    do
        local field_data=($(echo "${data[$i]}"))
        # if no type is specified for the field use 'mixed' as fallback
        if [ ${#field_data[@]} -ne 2 ]; then
            local type="mixed"
        else
            local type=${field_data[1]}
        fi
        # generate method name
        local name="${field_data[0]}"
        methods=($(get_methods "$class_name" "$name" "$type"))

        str+="$methods"
    done
    unset IFS

    str=$(echo -e "${str}\n}")
    create_file_with_content "$file_path" "$str"
}

# generates the ressource model class content
create_ressource_model_class() {
    local class_name="${NAME_SPACE}_${MODULE}_Model_Resource_${MODEL}"
    local file_path="$MODEL_PATH/Resource/$(echo "${MODEL}" | tr _ /).php"
    local dir_path=`dirname "$file_path"`

    # generate the class dock block
    local str=$(cat << EOM
`get_php_docblock "$class_name"`
class $class_name extends
    Mage_Core_Model_Resource_Db_Abstract
{

    /**
     * Resource models pseudo constructor.
     *
     * @return  null
     */
    protected function _construct()
    {
        \$this->_init('${TABLE_IDENTIFIER}', '${ID_FIELD}');
    }
}
EOM
)

    create_file_with_content "$file_path" "$str"
}

# generates the collection model class content
create_collection_model_class() {
    local class_name="${NAME_SPACE}_${MODULE}_Model_Resource_${MODEL}_Collection"
    local model_identifier=($(echo "${MODULE}/${MODEL}" | sed -e 's/.*/\L&\E/'))

    local file_path="$MODEL_PATH/Resource/$(echo "${MODEL}" | tr _ /)/Collection.php"
    local dir_path=`dirname "$file_path"`
    # generate the class dock block
    local str=$(cat << EOM
`get_php_docblock "$class_name"`
class $class_name extends
    Mage_Core_Model_Resource_Db_Collection_Abstract
{

    /**
     * Standard collection model pseudo constructor.
     *
     * @return  null
     */
    protected function _construct()
    {
        parent::_construct();
        \$this->_init('$model_identifier');
    }
}
EOM
)

    create_file_with_content "$file_path" "$str"
}

print_config

# read one line from stdin
read line

create_model_class "$line"
create_ressource_model_class
create_collection_model_class
