#!/bin/env bash
# Extract tables from a MySQL dump from stdin to stdout.
# Base on idea of https://github.com/kedarvj/mysqldumpsplitter/

show_help() {
    cat << EOM
USAGE:   $(basename $0) [-s] [-e|-t|-T] PATTERN

Extract tables from MySQL dump read from stdin to stdout. All trigger
information are also moved to the end of the output for faster import.

OPTIONS
   -e PATTERN   Like -t but matching tables are ignored.
   -s           If given the output inset records are put on separate lines
                for easier filtering and lookup.
   -t PATTERN   Table name or sed compatible pattern to determining which
                table should be extracted.
                'cms_page'          get only this table
                'cms_.*'            get all tables starting with 'cms_'
                'cms_.*|core_.*'    get all tables starting with 'cms_' or 'core_'
EOM
}

# Dumps the data from stdin and given name pattern to stdout.
dump_table() {
    local pattern=""
    local ignore="$2"   # if > 0 the pattern is considered as exclude pattern
    IFS='|' read -ra ADDR <<< "$1"
    for i in "${ADDR[@]}"; do
        if [ -z "$pattern" ]; then
            pattern="$i"
        else
            pattern="$pattern|$i"
        fi
    done
    awk -v table="($pattern)" -v invert="$ignore" '
        # Get first 17 lines to get the meta information like timezone settings.
        BEGIN {
            triggers = "";
        }

        NR <= 17 {
            print;
            next;
        }

        m = 0;
        # Then extract the table data and the outro data
        ($0 ~ "^-- Table structure for table `" table "`"),($0~"^UNLOCK TABLES;") {
            m = 1;
        }
        (invert && !m) || (!invert && m) {
            print;
            next;
        }

        # Collect the triggers.
        /^DELIMITER ;;$/,/^DELIMITER ;$/ {
            triggers = triggers "\n" $0;
            next;
        }

        # Get those lines restoring the previous values.
        /^\/\*!40101 SET SQL_MODE/,0 {
            # Print out the collected trigger definitions.
            if (triggers) {
                print triggers "\n";
                triggers = "";
            }
            print;
        };'
}

split_insert() {
    sed -e 's/\(^INSERT INTO `.*` VALUES \)/\1\n/g' -e 's/),(/),\n(/g'
}

if [ $# -lt 1 ]; then
    show_help
    exit 2
fi

tpattern=""
ignore=0
split=0
while getopts "e:hst:" args; do
    case "$args" in
        e)  tpattern="$OPTARG"
            ignore=1
            ;;
        h)  show_help
            exit 0 ;;
        s)  split=1 ;;
        t)  tpattern="$OPTARG" ;;
        \?) show_help
            exit 2 ;;
    esac
done

if [ $split -gt 0 ]; then
    dump_table "$tpattern" "$ignore" | split_insert
else
    dump_table "$tpattern" "$ignore"
fi
